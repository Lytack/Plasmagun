// Include libraries
#include <Wire.h>                   // For I2C communication (e.g., display, sensors)
#include <TFLI2C.h>                 // For TF Luna Lidar sensor (distance measurement via I2C)
#include <Adafruit_SSD1306.h>       // For OLED display (SSD1306 driver)
#include <Adafruit_GFX.h>           // Graphics library (required by display for shapes/text)
#include <DFRobotDFPlayerMini.h>    // For DFPlayer Mini MP3 module (play audio)
#include <SoftwareSerial.h>         // Allows serial communication on other pins
#include <elapsedMillis.h>          // Simple time handling without own variables
#include <Adafruit_BMP280.h>        // For BMP280 sensor (pressure and temperature measurement)
#include <AHT20.h>                  // For AHT20 sensor (temperature and humidity)

// OLED Display configuration
#define SCREEN_WIDTH 128            // Display width in pixels
#define SCREEN_HEIGHT 32            // Display height in pixels
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, -1); // OLED display object

// TF Luna Lidar sensor initialization (distance measurement)
TFLI2C tflI2C;
int16_t tfDist;                     // Variable for measured distance in cm
int16_t tfAddr = TFL_DEF_ADR;       // Default address of TF Luna

// DFPlayer Mini MP3 module initialization
SoftwareSerial mySerial(10, 11);    // Softserial pins for DFPlayer (Pin 10 = RX, 11 = TX)
DFRobotDFPlayerMini dfplayer;       // DFPlayer object

// Sensor initialization
Adafruit_BMP280 bmp;                // BMP280 sensor for pressure/temperature (not fully used)
AHT20 aht;                          // AHT20 sensor for temperature and humidity

// Pin definitions for hardware
#define BUTTON 2                    // Button (single button for functions)
#define BUTTON_LED 3                // LED in the button
#define RED_LED 4                   // Red LED (status indicator)
#define GREEN_LED 5                 // Green LED (status indicator)
#define WHITE_LED 6                 // White LED (flashlight)
#define LASER 7                     // Laser module (controlled via pin)
#define HV_TRIGGER 8                // High voltage module trigger
#define PIN_9 9                     // Solenoid valve (magnet valve)
#define FLOW_SENSOR_PIN 12          // Water flow sensor (pulse counter)
#define AIR_PUMP_PIN 13             // Air pump

// Control variables for system status
bool gasAlertActive = false;        // Whether gas has been detected (alarm state)
bool gasDetected = false;            // NEW: Gas detection flag for interrupt check

bool hvActivated = false;           // Whether high voltage has been activated (not directly used)
bool buttonPressed = false;         // Whether the button was pressed during gas alarm
bool soundPlaying = false;          // Whether sound 1 is playing (loop)
bool sound2Playing = false;         // Whether sound 2 is playing (loop for proximity alarm)
bool showProgressBar = false;       // Show progress bar
bool blinkState = true;             // Blinking for display output
bool laserToggle = false;           // Toggle laser on/off

// Flow sensor control
volatile int impulses = 0;           // NEW: Impulses counted in interrupt
int flowImpulseCounter = 0;         // Counter for water impulses (flow sensor)
elapsedMillis soundTimer;           // Time since last sound start
elapsedMillis blinkTimer;           // Timer for blinking

// Flow sensor debounce
unsigned long lastFlowTime = 0;     
const unsigned long flowCooldown = 500; // Cooldown time for flow sensor impulses (500ms)

// Button handling for short/long press
bool buttonState = false;           
bool lastButtonState = false;       
unsigned long buttonPressStart = 0; // Timestamp for button press start
bool longPressActive = false;       
const unsigned long longPressTime = 500; // Threshold for long press (500ms)

// Flow sensor startup phase
bool flowStartupPhase = true;       // Startup phase of the flow sensor
int startupImpulses = 0;            // Count impulses in the startup phase
elapsedMillis startupTimer;         // Timer for startup

// --- Flow Sensor Ignore After HV Ignition ---
unsigned long ignitionTime = 0;            // Timestamp of ignition
bool ignoreFlowSensor = false;             // Whether flow sensor should be ignored
const unsigned long ignoreDuration = 2000; // Ignore duration in milliseconds (2 seconds)

//-------------------------------------------------------
// Interrupt Service Routine (ISR) for flow sensor pulses
//-------------------------------------------------------
void flowSensorInterrupt() {
  if (!gasDetected) {       // **Count impulses only if no gas detected**
    impulses++;
  }
}

//-------------------------------------------------------
// setup() runs once at startup
//-------------------------------------------------------
void setup() {
  Serial.begin(115200);             // Serial output for debugging
  mySerial.begin(9600);             // Start DFPlayer communication
  Wire.begin();                     // Initialize I2C bus

  // Configure pins
  pinMode(FLOW_SENSOR_PIN, INPUT_PULLUP);
  pinMode(AIR_PUMP_PIN, OUTPUT);

  pinMode(BUTTON, INPUT_PULLUP);
  pinMode(BUTTON_LED, OUTPUT);
  pinMode(RED_LED, OUTPUT);
  pinMode(GREEN_LED, OUTPUT);
  pinMode(WHITE_LED, OUTPUT);
  pinMode(LASER, OUTPUT);
  pinMode(HV_TRIGGER, OUTPUT);
  pinMode(PIN_9, OUTPUT);

  // Default state of outputs
  digitalWrite(BUTTON_LED, HIGH);   
  digitalWrite(RED_LED, HIGH);      
  digitalWrite(GREEN_LED, LOW);
  digitalWrite(WHITE_LED, LOW);
  digitalWrite(LASER, LOW);
  digitalWrite(HV_TRIGGER, LOW);
  digitalWrite(AIR_PUMP_PIN, LOW);
  digitalWrite(PIN_9, LOW);

  // Initialize display
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C); // OLED start with I2C address 0x3C
  display.clearDisplay();
  display.setTextColor(SSD1306_WHITE);
  display.setTextSize(1);
  display.setCursor(0, 0);
  display.println("System starting...");
  display.display();

  // Switch LEDs for status indicator
  digitalWrite(RED_LED, LOW);
  digitalWrite(GREEN_LED, HIGH);

  // Check DFPlayer initialization
  if (!dfplayer.begin(mySerial)) {
    Serial.println("DFPlayer not found!");
  }

  // Start BMP280 sensor (optional, only checked in setup)
  if (!bmp.begin(0x77)) {
    Serial.println("BMP280 error!");
  }

  delay(1000);                      // Short wait time

  aht.begin();                      // Start AHT20 sensor

  dfplayer.play(3);                 // Play startup sound (sound 3)

  flowImpulseCounter = -1;          // Start value for flow sensor
  flowStartupPhase = true;          // Activate startup phase

  // Attach interrupt for flow sensor pin
  attachInterrupt(digitalPinToInterrupt(FLOW_SENSOR_PIN), flowSensorInterrupt, FALLING);
}

//-------------------------------------------------------
// loop() runs continuously
//-------------------------------------------------------
void loop() {
  // Read water flow sensor (pulse counting with debounce)

  static int lastFlowState = HIGH;  // Previous state
  int flowState = digitalRead(FLOW_SENSOR_PIN);

  unsigned long currentTime = millis();

  // Increase flowImpulseCounter from volatile impulses safely
  noInterrupts();
  int impulsesCopy = impulses;
  interrupts();

  if (!ignoreFlowSensor || millis() - ignitionTime > ignoreDuration) {
    if (lastFlowState == HIGH && flowState == LOW) {
      if (currentTime - lastFlowTime > flowCooldown) {
        flowImpulseCounter++;
        showProgressBar = true;
        lastFlowTime = currentTime;

        if (flowImpulseCounter >= 3 && !gasAlertActive) {
          gasAlertActive = true;
          gasDetected = true;         // <-- Set gas detected flag here
          if (!soundPlaying) {
            dfplayer.loop(1);         // Play sound 1 in loop
            soundPlaying = true;
            soundTimer = 0;
          }
        }
      }
    }
  }
  
  lastFlowState = flowState;

  // Read sensor values
  float humidity = aht.getHumidity();
  float temperature = aht.getTemperature();
  float distance = 0.0;
  bool hasDistance = tflI2C.getData(tfDist, tfAddr);
  if (hasDistance) {
    distance = tfDist / 100.0;      // Convert distance to meters
  }

  // Blink control for display output
  if (blinkTimer > 300) {
    blinkState = !blinkState;
    blinkTimer = 0;
  }

  //-------------------------------------
  // OLED display output
  //-------------------------------------

  display.clearDisplay();
  display.setTextSize(1);
  display.setCursor(2, 0);
  display.print(temperature, 1);
  display.print("C ");
  display.setCursor(49, 0);
  display.print(humidity, 1);
  display.print("% ");

  bool tooClose = hasDistance && distance < 0.3; // Distance under 30cm -> Warning

  if (tooClose) {
    // Display for too close distance + sound + laser info
    display.setTextSize(2);
    display.setCursor(11, 10);
    display.println("TOO CLOSE");

    if (blinkState) {
      display.setTextSize(1);
      display.setCursor(96, 0);
      display.print(distance, 2);
      display.println("m");
    }

    if (laserToggle) {
      display.setTextSize(1);
      display.setCursor(0, 25);
      display.print("Laser ON");
    }

    if (!soundPlaying && !sound2Playing) {
      dfplayer.loop(2);             // Play "too close" sound in loop
      sound2Playing = true;
    }
  } else {
    // Normal display: Status OK or gas alarm
    display.setTextSize(1);
    display.setCursor(96, 0);
    display.print(distance, 2);
    display.println("m");

    if (gasAlertActive) {
      display.setCursor(5, 10);
      display.println("!! Gas registered !!");
      display.setCursor(0, 20);
      display.println("High Voltage Released");
    } else {
      display.setTextSize(2);
      display.setCursor(10, 10);
      display.println("STATUS OK");

      if (laserToggle) {
        display.setTextSize(1);
        display.setCursor(0, 25);
        display.print("Laser ON");
      }
    }

    if (sound2Playing) {
      dfplayer.stop();              // Stop "too close" sound when no longer too close
      sound2Playing = false;
    }
  }

  // Button handling for laser and air pump
  buttonState = digitalRead(BUTTON) == LOW;

  if (!gasAlertActive) {
    if (buttonState && !lastButtonState) {
      buttonPressStart = millis();
      longPressActive = false;
    }

    if (buttonState && !longPressActive && millis() - buttonPressStart > longPressTime) {
      // Long press -> air pump on
      longPressActive = true;
      digitalWrite(AIR_PUMP_PIN, HIGH);
    }

    if (!buttonState && lastButtonState) {
      if (longPressActive) {
        // After long press release -> air pump off
        digitalWrite(AIR_PUMP_PIN, LOW);
      } else {
        // Short press -> toggle laser
        laserToggle = !laserToggle;
        digitalWrite(LASER, laserToggle ? HIGH : LOW);
      }
    }
  }

  lastButtonState = buttonState;

  // LED control based on status
  if (gasAlertActive) {
    digitalWrite(RED_LED, HIGH);
    digitalWrite(GREEN_LED, LOW);
    digitalWrite(LASER, HIGH);
    digitalWrite(BUTTON_LED, LOW);
    showProgressBar = false;
  } else {
    digitalWrite(RED_LED, LOW);
    digitalWrite(GREEN_LED, HIGH);
    digitalWrite(BUTTON_LED, HIGH);
    digitalWrite(PIN_9, LOW);
  }

  // Show progress bar if water impulse detected
  if (showProgressBar && !gasAlertActive && flowImpulseCounter > 0) {
    int spacing = 4;
    for (int i = 0; i < 3; i++) {
      int x = 10 + (i * (34 + spacing));
      if (flowImpulseCounter > i) {
        display.fillRect(x, 25, 34, 6, SSD1306_WHITE);
      } else {
        display.drawRect(x, 25, 34, 6, SSD1306_WHITE);
      }
    }
  }

  display.display();

  //-------------------------------------
  // If gas alarm active and button is pressed:
  // High voltage sequence (charging, discharge, cooldown)
  //-------------------------------------

  if (gasAlertActive && buttonState && !buttonPressed) {
    // One-time sequence when alarm confirmed
    buttonPressed = true;
    dfplayer.stop();

    // Charging phase with loading bar
    unsigned long chargeStart = millis();
    while (millis() - chargeStart < 1000) {
      float humidity = aht.getHumidity();
      float temperature = aht.getTemperature();
      float distance = tflI2C.getData(tfDist, tfAddr) ? tfDist / 100.0 : 0.0;

      int progress = map(millis() - chargeStart, 0, 1000, 0, 108);

      display.clearDisplay();
      display.setCursor(2, 0);
      display.print(temperature, 1);
      display.print("C ");
      display.setCursor(49, 0);
      display.print(humidity, 1);
      display.print("% ");
      display.setCursor(96, 0);
      display.print(distance, 2);
      display.println("m");

      display.setCursor(10, 10);
      display.println("Loading...");
      display.drawRect(10, 24, 108, 8, SSD1306_WHITE);
      display.fillRect(10, 24, progress, 8, SSD1306_WHITE);
      display.display();
      delay(20);
    }

    digitalWrite(PIN_9, HIGH); // Solenoid valve on
    delay(500);
    activateHV();  // Trigger high voltage
    ignitionTime = millis();      // Record ignition time
    ignoreFlowSensor = true;      // Start ignoring flow sensor

    // Flashlight
    digitalWrite(WHITE_LED, HIGH);
    delay(100);
    digitalWrite(WHITE_LED, LOW);
    delay(400);
    digitalWrite(PIN_9, LOW); // Solenoid valve off
    delay(500);

    // Switch LEDs to shutdown status
    digitalWrite(RED_LED, HIGH);
    digitalWrite(GREEN_LED, LOW);
    digitalWrite(BUTTON_LED, LOW);
    digitalWrite(LASER, LOW);
    digitalWrite(HV_TRIGGER, LOW);

    digitalWrite(AIR_PUMP_PIN, HIGH); // Air pump post-run

    dfplayer.play(4); // Play cooldown sound

    // Cooldown phase with bar display
    for (int i = 0; i <= 108; i++) {
      humidity = aht.getHumidity();
      temperature = aht.getTemperature();
      bool hasDistance = tflI2C.getData(tfDist, tfAddr);
      if (hasDistance) distance = tfDist / 100.0;

      display.clearDisplay();
      display.setCursor(2, 0);
      display.print(temperature, 1);
      display.print("C ");
      display.setCursor(49, 0);
      display.print(humidity, 1);
      display.print("% ");
      display.setCursor(96, 0);
      display.print(distance, 2);
      display.println("m");

      display.setCursor(10, 10);
      display.println("Cooldown...");
      display.drawRect(10, 22, 108, 8, SSD1306_WHITE);
      display.fillRect(10, 22, i, 8, SSD1306_WHITE);
      display.display();
      delay(100);
    }

    digitalWrite(AIR_PUMP_PIN, LOW); // Air pump off

    // Reset system to initial state
    gasAlertActive = false;
    gasDetected = false;          // <-- Reset gas detected flag here!
    buttonPressed = false;
    soundPlaying = false;
    sound2Playing = false;
    flowImpulseCounter = 0;
    impulses = 0;                 // <-- Reset interrupt impulse count as well
    showProgressBar = false;
    flowStartupPhase = true;
    startupImpulses = 0;
  }

  if (ignoreFlowSensor && millis() - ignitionTime > ignoreDuration) {
    ignoreFlowSensor = false;  // Reactivate flow sensor after 2 seconds
  }

  delay(50); // Small pause in main loop
}

// Function to activate high voltage (500ms on)
void activateHV() {
  digitalWrite(HV_TRIGGER, HIGH);
  delay(500);
  digitalWrite(HV_TRIGGER, LOW);
}
